generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  password       String 
  phone          String          @unique
  address        String    
  role           Role            @default(BUYER) 
  refreshTokens  RefreshToken[] 
  seller         Seller?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("users")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String  
  userId     Int       
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ip         String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  @@map("refresh_tokens")
}

model Seller {
  id              String   @id @default(uuid())
  sellerId        Int      @unique
  user            User     @relation(fields: [sellerId], references: [id])
  pickupAddress   String
  businessName    String
  gstNumber       String?
  bankInfo        String?
  sellerVariants  SellerVariant[]

  @@map("sellers")
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  slug           String    @unique
  description    String?  
  subcategories  Subcategory[]  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("categories")
}

model Subcategory {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  slug         String    @unique
  description  String?
  categoryId   Int
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("subcategories")
}

model Product {
  id             Int          @id @default(autoincrement())
  name           String  
  description    String
  subcategoryId  Int
  subcategory    Subcategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  variants       Variant[]
  createdAt      DateTime     @default(now())

  @@map("products")
}

model Variant {
  id              Int       @id @default(autoincrement())
  sku             String    @unique
  productId       Int
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes      Json
  sellerVariants  SellerVariant[]
  createdAt       DateTime  @default(now())

  @@map("variants")
}

model SellerVariant {
  id         Int       @id @default(autoincrement())
  sellerId   String 
  seller     Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  variantId  Int  
  variant    Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  price      Float  
  stock      Int
  createdAt  DateTime  @default(now())

  @@map("seller_variants")
}
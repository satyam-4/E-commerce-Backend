generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  password       String 
  phone          String          @unique
  address        String    
  role           Role            @default(BUYER) 
  refreshTokens  RefreshToken[] 
  seller         Seller?
  reviews        ProductReview[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("users")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String  
  userId     Int       
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ip         String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  @@map("refresh_tokens")
}

model Seller {
  id                 String   @id @default(uuid())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id])
  sellerRating       Float    @default(0)
  pickupAddress      String
  businessName       String
  gstNumber          String?
  bankAccountNumber  Int?    
  ifscCode           String?
  bankName           String?      
  sellerVariants  SellerVariant[]

  @@map("sellers")
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  slug           String    @unique
  description    String?  
  subcategories  Subcategory[]  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("categories")
}

model Subcategory {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  slug         String    @unique
  description  String?
  categoryId   Int
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("subcategories")
}

model Product {
  id               Int          @id @default(autoincrement())
  name             String  
  description      String
  subcategoryId    Int
  subcategory      Subcategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  productVariants  ProductVariant[]
  createdAt        DateTime     @default(now())

  @@map("products")
}

model ProductVariant {
  id              Int       @id @default(autoincrement())
  sku             String    @unique
  productId       Int
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes      Json
  sellerVariants  SellerVariant[]
  reviews         ProductReview[]
  reviewSummary   ProductReviewSummary?
  createdAt       DateTime  @default(now())

  @@map("product_variants")
}

model SellerVariant {
  id                Int              @id @default(autoincrement())
  sellerId          String 
  seller            Seller           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productVariantId  Int  
  productVariant    ProductVariant   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  price             Float  
  stock             Int
  createdAt         DateTime         @default(now())

  @@unique([productVariantId, sellerId])
  @@map("seller_variants")
}

model ProductReview {
  id                Int             @id @default(autoincrement())
  rating            Float  
  review            String?
  userId            Int
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  productVariantId  Int 
  productVariant    ProductVariant  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, productVariantId])
  @@map("product_reviews")
}

model ProductReviewSummary {
  id                Int             @id @default(autoincrement())
  productVariantId  Int             @unique
  productVariant    ProductVariant  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  averageRating     Float           @default(0)
  totalReviews      Int             @default(0)
  ratingBreakdown   Json?
  updatedAt         DateTime        @default(now())  @updatedAt

  @@map("product_review_summaries")
}